PluralSight: Spring Boot Fundamentals (1hr 38M) 12/11/2020
Note: other learning notes are in the learn_spring project

Web-application build
          -reduce boiler-plate code
          -auto configuration
TOPIC:
    -Configuring a Spring MVC App
    -Develop RESTful API
    -Build GraphQL server
    -Make app prod-ready (using Spring Acutator)
    -Unit and Integration Testing

code for this course:
    https://gitlab.com/videolearning/spring-fundametals

-Boot has Starter dependencies that it will link in standard configurations packs for you, example:
    *spring-boot-starter-web
    *spring-boot-starter-test
    *spring-boot-starter-data-jpa

[Actuator]: monitor running app, manage HTTP endpoints, Metrics, logs, http trace, health status

[Spring Boot Cli]: uses groovy script for prototyping

[Spring Initializr]:
    https://start.spring.io/


There is a CLI instead of the Spring Initializr website create project wizard
example: (can be instead with brew installer on mac)
    //many options for dependencies, builder(gradle/maven) and other properties like project group name: com.myproject
    .name
    //example command:
    spring --version
    spring init --build=gradle -g=com.github.jtam2000 mytestproject


Key Annotation for Spring-Boot;

//this is the single annotation for a springboot project
// it replaces 3 other spring boot annotation: @SpringBootConfiguration,
// @EnableAutoConfiguration, and @ComponentScan
@SpringBootApplication

to use different config files for different environments: dev, test, prod etc
to apply a specific environment, use a VM option -Dspring.profiles.active={environment}, like this
 jar -Dspring.profiles.active=test  executableJarFile.jar


[Spring-Data JPA] module picks [Hibernate] as its default provider for JPA
    -it provides Spring library (Component scan) to obviate the need for the [persistence.xml] file for JPA
    -it scan for any @Entity annotations



Note: The main application (main()) need to be at the root for the auto component scans
to work correctly.
    if you put your main application file in a parallel packages with other support packages
    it will not work. This is because the component scan starts from the main application package and then scan the
    Application package and then scan the Sub-packages of the application.



------------------------------------------------------------------------------------------------------------------------
I started the Spring MVC Course to get a better understanding of MVC concepts.  12/17/2020

MVC has 3 parts
1. Model: the data abstraction (eg. database, cloud persistence)
2. View: presentation/rendering of the Model
3. Controller: router that directs Request (converting the request into request for info from the Model)
            to the backend and returns a Response (in the form of a model) to the requester

   Learning:
        Model = Data Abstraction ,
        View = Data Presentation ,
        Controller = Request Router

simply stated: the controller controls how the model are presented to the view. The
         controller handles requests and stored state info in models and respond to the request with
           presentation to the view

        Controller
       \|/      \|/
      View     Model

another view is from perspective of Layers.
        [Presentation Layer](View) <-> [Business Logic](Controller) <--> [Data Layer] (Model)
         [data place holders] filled in <--data models from response <---> data persistence



 LEARNING:
    [3 Spring annotations] for  MVC:
        @Controller: route request and response, no business logic here, handles exception from @Service, @Repository
        @Service:  Verb/action: [Business Logic], [Transactions] , [transformation] of data fo response, object states
        @Repository: noun/data: [data mappings] to the Data source (same DAO: data access objects for persistence )



Terms
======
[SPA]               : single page application
[DispatcherServlet] : entry point into an application
[Controller]        : is implementation of the Command Pattern (GOF)
[RequestMapping]    : translating a request into a URL
[ViewResolver]      : locate the view and ask the presentation server to render it
[servlet-config]    : configuration file for the application
[Bean]              : Pojo that is wrapped/configured by Spring


Spring MVC Configuration: 4 parts
1. grade/pom.xml  (for dependencies)
2. config
3. java
4. view
    webapp/WEB-INF/
        jsp/greeting.jsp

[@Controller]
    -http request are handled by Controllers
    -implements a controller object (i.e., web controller), @Controller tells Spring this is the class to
     look for Responses/Callbacks to http requests.  The Callbacks can be GET, PUT, POST and others and Spring
     has Annotation for each of these callback types
     LEARNING: This is known as [Request Mapping] within Controllers

    -@GetMapping("/request") - annotates that an HTTP Get request to "/request" will call the annotated function

      example:

        //LEARNING: the purpose of this function is to return the name of the [VIEW], which is the name of the html page
                  The @GetMapping ensures that this method is called with there is a [/greeting] http request
        @GetMapping("/greeting")
	    public String greeting(@RequestParam(name="name", required=false, defaultValue="World") String functParamName,
	                            Model model) {


		    model.addAttribute("name", name);
		    return "greeting"; //LEARNING: the return String is the [name of the View]  responsible for rendering
		                                   the HTML content
	    }

	@RequestParam - annotates that the function param is a HTTP request parameter, has several options:
	            -required: if the param is required
	            -defaultValue: value if it is not provided by in the HTTP request
	            -name: name of the request parameter

	            @RequestParam binds the value of the query string parameter [name] into
	            the [functParamName] parameter of the greeting() method.


	 Summary: Controllers
	    1. Provide the callback(which is the response) for a given HTTP request, anntated with @GetMapping
	    2. the Request can have parameters and they can be bind to the parameter of the Callback, using @RequestParam
	    3. Must return name of the Response view (html to render the response)

[LEARNING: View Resolver]
-The Spring controller uses a 'View Resolver' to locate the views by name that is returned from @GetMapping
-There is ViewResolver object that Spring creates when you use @SpringBootApplication, you can override this
-You configure the ViewResolver using the Application configuration like this:
    example:
            spring:
                mvc:
                  view:
                    prefix: /WEB-INF/jsp/    # LEARNING: Tell SPRING MVC where to look for our HTTP Response [VIEWS]
                    suffix: .jsp             #           the file suffix of the view page
                                             #there can be more than 1 Resolver, you can extend via ViewResolver
                                             # interface, example: [ResourceBundleViewResolver] is an resolver
                                             # for internationalization functionality

[LEARNING: Interceptors]
    -process that are preformed before the views are rendered
    -like International interceptors

[LEARNING: Post-Redirect-Get] [PRG]  for POST requests ONLY

    -helps eliminate form re-submission in the case of a POST request
        after the post request has succeeded, the server will submit a GET request so that a resubmit is disabled
    - to have this effect in Spring, you have to return a prefix to the returned VIEW string like this:
        LEARNING:
            return "redirect:myView"; //notice "redirect:" before the myView name


[LEARNING: Thymeleaf]
    -lightweight html5 framework instead of using jsp's
    -recommended templating tool for Spring